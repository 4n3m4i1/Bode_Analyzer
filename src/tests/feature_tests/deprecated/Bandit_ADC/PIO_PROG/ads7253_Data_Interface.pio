


; Write data to pins, handle CS and SCK
.program ads7253_write_data_pio
.side_set 2

.wrap_target

beepboop:
    out pins, 1         side 0x2 [1]    ; Data shift out, SCK high
    ;nop                 side 0x0        ; Stall 1, SCK low
    ;jmp x-- beepboop    side 0x0
    nop                 side 0x3        ; Stall 1, SCK low
    jmp x-- beepboop    side 0x3

    out pins, 1         side 0x2[1]
    ;mov x, y            side 0x0
    ;jmp !osre beepboop  side 0x0

    mov x, y            side 0x3
    jmp !osre beepboop  side 0x3

public entry_point:
    pull ifempty        side 0x1 [1]    ; Wait for data, cs high clk low
    ;irq  set 7          side 0x0 [1]    ; Set irq7 flag to start DIN, stall 1
.wrap

; Read data from pins, synchronize with other SM with delays

.program ads7253_read_data_pio

;.wrap_target
;    wait 1 irq 7 [1]     ; Wait for CS front porch to end, set sample half way thru SCK hi
;bitloop:
;    in  pins, 1 [2]     ; Input data (1 cycle), delay to sync with main pace
;    jmp x-- bitloop     ; Fallthru to reset transfer counter
;    mov x, y
;    irq clear 7
;.wrap

.wrap_target
topmiso:
    wait    1 gpio 2    ; Wait for sck rising
    in      pins, 1     ; read data in
    wait    0 gpio 2    ; Wait for sck falling
    jmp     topmiso
.wrap


% c-sdk {
static inline void ADS7253_PIO_Setup(PIO pio, bool DUALSDO, uint CSPIN, uint SCKPIN, uint SDOPIN, uint SDIPIN_A, uint SDIPIN_B){
    const unsigned int MAINSPI_SM = 0;
    const unsigned int DIN_A_SM = 1;
    const unsigned int DIN_B_SM = 2;
    const unsigned int mainsmoffset = 0;
    const unsigned int datasmoffset = 16;
    unsigned int transfer_size;
    if(DUALSDO){        // setup for dual sdo operation
        transfer_size = 16;
    } else {            // setup for single sdo operation
        transfer_size = 32;
    }   

    pio_sm_config mainsm = ads7253_write_data_pio_program_get_default_config(mainsmoffset);
    sm_config_set_sideset_pins(&mainsm, CSPIN);  // CSN and SCK pins as sideset
    sm_config_set_out_pins(&mainsm, SDOPIN, 1);
    hw_set_bits(&pio->input_sync_bypass, 1u << SDIPIN_A);
    if(DUALSDO) hw_set_bits(&pio->input_sync_bypass, 1u << SDIPIN_B);
    //pio_sm_init(pio, MAINSPI_SM, ads7253_write_data_pio_offset_entry_point, &mainsm);
    // Load main pacing state machine with number of bits to transfer
    pio_sm_exec(pio, MAINSPI_SM, pio_encode_set(pio_x, transfer_size - 2));
    pio_sm_exec(pio, MAINSPI_SM, pio_encode_set(pio_y, transfer_size - 2));
    
    pio_sm_set_pins_with_mask(pio, MAINSPI_SM, (1u << CSPIN), (1u << CSPIN) | (1u << SCKPIN) | (1u << SDOPIN));
    pio_sm_set_pindirs_with_mask(pio, MAINSPI_SM, (1u << CSPIN) | (1u << SCKPIN) | (1 << SDOPIN),
                                                    (1u << CSPIN) | (1u << SCKPIN) | (1 << SDOPIN));
    
    //pio_sm_set_consecutive_pindirs(pio, MAINSPI_SM, CSPIN, 3, true);

    pio_sm_set_pindirs_with_mask(pio, DIN_A_SM, 0, (1u << SDIPIN_A));
    pio_sm_set_pindirs_with_mask(pio, DIN_B_SM, 0, (1u << SDIPIN_B));

    pio_sm_config datasm_A = ads7253_read_data_pio_program_get_default_config(datasmoffset);
    sm_config_set_in_pins(&datasm_A, SDIPIN_A);
    pio_sm_config datasm_B = ads7253_read_data_pio_program_get_default_config(datasmoffset);
    sm_config_set_in_pins(&datasm_B, SDIPIN_B);
    
    sm_config_set_out_shift(&mainsm, false, true, transfer_size);
    sm_config_set_in_shift(&datasm_A, false, true, transfer_size);
    sm_config_set_in_shift(&datasm_B, false, true, transfer_size);
    
    pio_sm_exec(pio, DIN_A_SM, pio_encode_set(pio_x, transfer_size - 2));
    pio_sm_exec(pio, DIN_A_SM, pio_encode_set(pio_y, transfer_size - 2));
    pio_sm_exec(pio, DIN_B_SM, pio_encode_set(pio_x, transfer_size - 2));
    pio_sm_exec(pio, DIN_B_SM, pio_encode_set(pio_y, transfer_size - 2));

    pio_gpio_init(pio, CSPIN);
    pio_gpio_init(pio, SCKPIN);
    pio_gpio_init(pio, SDOPIN);
    pio_gpio_init(pio, SDIPIN_A);

    if(DUALSDO) pio_gpio_init(pio, SDIPIN_B);
    pio_sm_set_clkdiv_int_frac(pio, MAINSPI_SM, 16, 0);
    pio_sm_set_clkdiv_int_frac(pio, DIN_A_SM, 1, 0);
    pio_sm_set_clkdiv_int_frac(pio, DIN_B_SM, 1, 0);
    
    pio_sm_init(pio, MAINSPI_SM, ads7253_write_data_pio_offset_entry_point, &mainsm);
    pio_sm_init(pio, DIN_A_SM, datasmoffset, &datasm_A);
    pio_sm_init(pio, DIN_B_SM, datasmoffset, &datasm_B);
    
    pio_add_program_at_offset(pio, &ads7253_write_data_pio_program, mainsmoffset);
    pio_add_program_at_offset(pio, &ads7253_read_data_pio_program, datasmoffset);
    
    pio->sm[MAINSPI_SM].shiftctrl |= (PIO_SM0_SHIFTCTRL_FJOIN_TX_BITS);
    pio->sm[DIN_A_SM].shiftctrl |= (PIO_SM1_SHIFTCTRL_FJOIN_RX_BITS);
    pio->sm[DIN_B_SM].shiftctrl |= (PIO_SM2_SHIFTCTRL_FJOIN_RX_BITS);
    
    pio_sm_set_enabled(pio, MAINSPI_SM, true);
    pio_sm_set_enabled(pio, DIN_A_SM, true);
    if(DUALSDO) pio_sm_set_enabled(pio, DIN_B_SM, true);
}
%}

