


; Write data to pins, handle CS and SCK
.program ads7253_write_data_pio
.side_set 2
.wrap_target
beepboop:
    out pins, 1         side 0x2 [1]    ; Data shift out, SCK high
    nop                 side 0x0        ; Stall 1, SCK low
    jmp x-- beepboop    side 0x0

    out pins, 1         side 0x2 [1]
    mov x, y            side 0x0
    jmp !osre beepboop  side 0x0

public entry_point:
    pull ifempty        side 0x1 [1]    ; Wait for data, cs high clk low
.wrap

; Working on this one
;.wrap_target
;beepboop:
;    out pins, 1         side 0x2 [1]    ; Data shift out, SCK high
;    nop                 side 0x0        ; Stall 1, SCK low
;    jmp x-- beepboop    side 0x0
;
;    out pins, 1         side 0x2[1]
;    mov x, y            side 0x0
;    jmp !osre beepboop  side 0x0
;
;public entry_point:
;    pull ifempty        side 0x1    ; Wait for data, cs high clk low
;    irq  set 7          side 0x1 [1]    ; Set irq7 flag to start DIN, stall 1
;.wrap


; Read data from pins, synchronize with other SM with delays

.program ads7253_read_data_pio

.wrap_target
topdin:
    wait 1 gpio 2   
    in pins, 1      [1]
    ;in pins, 1
    ;wait 0 gpio 2
    ;jmp x-- topdin
public entry_point:
    ;mov x, y
    ;wait 1 gpio 2
.wrap


% c-sdk {
#include "hardware/gpio.h"
static inline void ADS7253_MainSM_Setup(PIO pio, uint mainsm, uint CSPIN, uint SCKPIN, uint SDOPIN){
    const uint mainsmoffset = 0;
    const uint shiftct = 16;
    pio_sm_config c = ads7253_write_data_pio_program_get_default_config(mainsmoffset);

    /*
    pio_sm_config c = cpha ? spi_cpha1_cs_program_get_default_config(prog_offs) : spi_cpha0_cs_program_get_default_config(prog_offs);
    sm_config_set_out_pins(&c, pin_mosi, 1);
    sm_config_set_in_pins(&c, pin_miso);
    sm_config_set_sideset_pins(&c, pin_sck);
    sm_config_set_out_shift(&c, false, true, n_bits);
    sm_config_set_in_shift(&c, false, true, n_bits);
    sm_config_set_clkdiv(&c, clkdiv);

    pio_sm_set_pins_with_mask(pio, sm, (2u << pin_sck), (3u << pin_sck) | (1u << pin_mosi));
    pio_sm_set_pindirs_with_mask(pio, sm, (3u << pin_sck) | (1u << pin_mosi), (3u << pin_sck) | (1u << pin_mosi) | (1u << pin_miso));
    pio_gpio_init(pio, pin_mosi);
    pio_gpio_init(pio, pin_miso);
    pio_gpio_init(pio, pin_sck);
    pio_gpio_init(pio, pin_sck + 1);
    gpio_set_outover(pin_sck, cpol ? GPIO_OVERRIDE_INVERT : GPIO_OVERRIDE_NORMAL);
    hw_set_bits(&pio->input_sync_bypass, 1u << pin_miso);

    uint entry_point = prog_offs + (cpha ? spi_cpha1_cs_offset_entry_point : spi_cpha0_cs_offset_entry_point);
    pio_sm_init(pio, sm, entry_point, &c);
    pio_sm_exec(pio, sm, pio_encode_set(pio_x, n_bits - 2));
    pio_sm_exec(pio, sm, pio_encode_set(pio_y, n_bits - 2));
    pio_sm_set_enabled(pio, sm, true);
    */

    sm_config_set_out_pins(&c, SDOPIN, 1);
    sm_config_set_sideset_pins(&c, CSPIN);
    sm_config_set_out_shift(&c, false, true, shiftct);
    c.clkdiv = 1 << 16;

    pio_sm_set_pins_with_mask(pio, mainsm, (1u << CSPIN), (1u << CSPIN) | (1u << SCKPIN) | (1u << SDOPIN));
    pio_sm_set_pindirs_with_mask(pio, mainsm, (1u << CSPIN) | (1u << SCKPIN) | (1u << SDOPIN), (1u << CSPIN) | (1u << SCKPIN) | (1u << SDOPIN));

    pio_gpio_init(pio, CSPIN);
    pio_gpio_init(pio, SCKPIN);
    pio_gpio_init(pio, SDOPIN);

    pio_sm_init(pio, mainsm, ads7253_write_data_pio_offset_entry_point, &c);
    pio_sm_exec(pio, mainsm, pio_encode_set(pio_x, shiftct - 2));
    pio_sm_exec(pio, mainsm, pio_encode_set(pio_y, shiftct - 2));
    pio_sm_set_enabled(pio, mainsm, true);
    
}

static inline void ADS7253_PIO_Setup(PIO pio, bool DUALSDO, uint CSPIN, uint SCKPIN, uint SDOPIN, uint SDIPIN_A, uint SDIPIN_B){
    const unsigned int MAINSPI_SM = 0;
    const unsigned int DIN_A_SM = 1;
    const unsigned int DIN_B_SM = 2;
    const unsigned int mainsmoffset = 0;
    const unsigned int datasmoffset = 16;
    unsigned int transfer_size;
    if(DUALSDO){        // setup for dual sdo operation
        transfer_size = 16;
    } else {            // setup for single sdo operation
        transfer_size = 32;
    }   

    pio_sm_config mainsm = ads7253_write_data_pio_program_get_default_config(mainsmoffset);
    sm_config_set_sideset_pins(&mainsm, CSPIN);  // CSN and SCK pins as sideset
    sm_config_set_out_pins(&mainsm, SDOPIN, 1);
    sm_config_set_fifo_join(&mainsm, PIO_FIFO_JOIN_TX);
    
    pio_sm_set_pins_with_mask(pio, MAINSPI_SM, (1u << CSPIN), (1u << CSPIN) | (1u << SCKPIN) | (1u << SDOPIN));
    pio_sm_set_pindirs_with_mask(pio, MAINSPI_SM, (1u << CSPIN) | (1u << SCKPIN) | (1 << SDOPIN), (1u << CSPIN) | (1u << SCKPIN) | (1 << SDOPIN));
    //pio_sm_set_consecutive_pindirs(pio, MAINSPI_SM, CSPIN, 3, true);

    sm_config_set_out_shift(&mainsm, false, true, transfer_size);

    // Load main pacing state machine with number of bits to transfer
    pio_sm_exec(pio, MAINSPI_SM, pio_encode_set(pio_x, transfer_size - 2));
    pio_sm_exec(pio, MAINSPI_SM, pio_encode_set(pio_y, transfer_size - 2));

    pio_gpio_init(pio, CSPIN);
    pio_gpio_init(pio, SCKPIN);
    pio_gpio_init(pio, SDOPIN);

    pio_sm_init(pio, MAINSPI_SM, ads7253_write_data_pio_offset_entry_point, &mainsm);
    pio_add_program_at_offset(pio, &ads7253_write_data_pio_program, mainsmoffset);

    pio_sm_config datasm_A = ads7253_read_data_pio_program_get_default_config(datasmoffset);
    sm_config_set_in_pins(&datasm_A, SDIPIN_A);
    pio_sm_config datasm_B = ads7253_read_data_pio_program_get_default_config(datasmoffset);
    sm_config_set_in_pins(&datasm_B, SDIPIN_B);

    hw_set_bits(&pio->input_sync_bypass, 1u << SDIPIN_A);
    if(DUALSDO) hw_set_bits(&pio->input_sync_bypass, 1u << SDIPIN_B);
    
    pio_sm_set_pindirs_with_mask(pio, DIN_A_SM, 0, (1u << SDIPIN_A));
    pio_sm_set_pindirs_with_mask(pio, DIN_B_SM, 0, (1u << SDIPIN_B));

    sm_config_set_in_shift(&datasm_A, false, true, transfer_size);
    sm_config_set_in_shift(&datasm_B, false, true, transfer_size);

    sm_config_set_fifo_join(&datasm_A, PIO_FIFO_JOIN_RX);
    sm_config_set_fifo_join(&datasm_B, PIO_FIFO_JOIN_RX);
    

    pio_sm_exec(pio, DIN_A_SM, pio_encode_set(pio_x, transfer_size));
    pio_sm_exec(pio, DIN_A_SM, pio_encode_set(pio_y, transfer_size));
    pio_sm_exec(pio, DIN_B_SM, pio_encode_set(pio_x, transfer_size));
    pio_sm_exec(pio, DIN_B_SM, pio_encode_set(pio_y, transfer_size));

    pio_gpio_init(pio, SDIPIN_A);
    if(DUALSDO) pio_gpio_init(pio, SDIPIN_B);
    
    //pio_sm_init(pio, DIN_A_SM, ads7253_read_data_pio_offset_entry_point + datasmoffset, &datasm_A);
    pio_sm_init(pio, DIN_A_SM, datasmoffset, &datasm_A);
    //pio_sm_init(pio, DIN_B_SM, ads7253_read_data_pio_offset_entry_point + datasmoffset, &datasm_B);
    pio_sm_init(pio, DIN_B_SM, datasmoffset, &datasm_B);
    
    pio_add_program_at_offset(pio, &ads7253_read_data_pio_program, datasmoffset);
    
    pio_sm_set_clkdiv_int_frac(pio, MAINSPI_SM, 1, 0);
    pio_sm_set_clkdiv_int_frac(pio, DIN_A_SM, 1, 0);
    pio_sm_set_clkdiv_int_frac(pio, DIN_B_SM, 1, 0);

   // pio->sm[MAINSPI_SM].shiftctrl |= (PIO_SM0_SHIFTCTRL_FJOIN_TX_BITS);
   // pio->sm[DIN_A_SM].shiftctrl |= (PIO_SM1_SHIFTCTRL_FJOIN_RX_BITS);
   // pio->sm[DIN_B_SM].shiftctrl |= (PIO_SM2_SHIFTCTRL_FJOIN_RX_BITS);
    

    pio_sm_set_enabled(pio, MAINSPI_SM, true);
    pio_sm_set_enabled(pio, DIN_A_SM, true);
    if(DUALSDO) pio_sm_set_enabled(pio, DIN_B_SM, true);

    pio_clkdiv_restart_sm_mask(pio, 0xF);
}
%}

