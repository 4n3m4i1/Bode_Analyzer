// -------------------------------------------------- //
// This file is autogenerated by pioasm; do not edit! //
// -------------------------------------------------- //

#pragma once

#if !PICO_NO_HARDWARE
#include "hardware/pio.h"
#endif

// ---------------- //
// ADS7253_SPI_CTRL //
// ---------------- //

#define ADS7253_SPI_CTRL_wrap_target 0
#define ADS7253_SPI_CTRL_wrap 7

#define ADS7253_SPI_CTRL_offset_entry_point 6u

static const uint16_t ADS7253_SPI_CTRL_program_instructions[] = {
            //     .wrap_target
    0x7101, //  0: out    pins, 1         side 2 [1] 
    0x0140, //  1: jmp    x--, 0          side 0 [1] 
    0x7101, //  2: out    pins, 1         side 2 [1] 
    0xa022, //  3: mov    x, y            side 0     
    0x00e0, //  4: jmp    !osre, 0        side 0     
    0xa742, //  5: nop                    side 0 [7] 
    0x89e0, //  6: pull   ifempty block   side 1 [1] 
    0xa442, //  7: nop                    side 0 [4] 
            //     .wrap
};

#if !PICO_NO_HARDWARE
static const struct pio_program ADS7253_SPI_CTRL_program = {
    .instructions = ADS7253_SPI_CTRL_program_instructions,
    .length = 8,
    .origin = -1,
};

static inline pio_sm_config ADS7253_SPI_CTRL_program_get_default_config(uint offset) {
    pio_sm_config c = pio_get_default_sm_config();
    sm_config_set_wrap(&c, offset + ADS7253_SPI_CTRL_wrap_target, offset + ADS7253_SPI_CTRL_wrap);
    sm_config_set_sideset(&c, 2, false, false);
    return c;
}
#endif

// ------------------ //
// ADS7253_SPI_INGEST //
// ------------------ //

#define ADS7253_SPI_INGEST_wrap_target 0
#define ADS7253_SPI_INGEST_wrap 2

#define ADS7253_SPI_INGEST_offset_entry_point 0u

static const uint16_t ADS7253_SPI_INGEST_program_instructions[] = {
            //     .wrap_target
    0x2082, //  0: wait   1 gpio, 2                  
    0x4001, //  1: in     pins, 1                    
    0x2102, //  2: wait   0 gpio, 2              [1] 
            //     .wrap
};

#if !PICO_NO_HARDWARE
static const struct pio_program ADS7253_SPI_INGEST_program = {
    .instructions = ADS7253_SPI_INGEST_program_instructions,
    .length = 3,
    .origin = -1,
};

static inline pio_sm_config ADS7253_SPI_INGEST_program_get_default_config(uint offset) {
    pio_sm_config c = pio_get_default_sm_config();
    sm_config_set_wrap(&c, offset + ADS7253_SPI_INGEST_wrap_target, offset + ADS7253_SPI_INGEST_wrap);
    return c;
}

#include "hardware/gpio.h"
static inline void pio_ads7253_spi_init(PIO pio, uint num_bits, uint clkdiv_i, uint clkdiv_f,
        uint pin_cs, uint pin_copi, uint pin_dinA, uint8_t invclk) {
    const uint sm = 0;
    // Setup output state machine
    unsigned int prog_offs = pio_add_program(pio, &ADS7253_SPI_CTRL_program);
    pio_sm_config c = ADS7253_SPI_CTRL_program_get_default_config(prog_offs);
    sm_config_set_out_pins(&c, pin_copi, 1);
    sm_config_set_sideset_pins(&c, pin_cs);
    sm_config_set_out_shift(&c, false, true, num_bits);
    sm_config_set_clkdiv_int_frac(&c, clkdiv_i, clkdiv_f);
    pio_sm_set_pins_with_mask(pio, sm, (2u << pin_cs), (3u << pin_cs) | (1u << pin_copi));
    pio_sm_set_pindirs_with_mask(pio, sm, (3u << pin_cs) | (1u << pin_copi), (3u << pin_cs) | (1u << pin_copi));
    sm_config_set_fifo_join(&c, PIO_FIFO_JOIN_TX);  // Double depth TX fifo
    pio_gpio_init(pio, pin_copi);
    pio_gpio_init(pio, pin_cs);
    pio_gpio_init(pio, pin_cs + 1);
    gpio_set_outover(pin_cs + 1, invclk ? GPIO_OVERRIDE_INVERT : GPIO_OVERRIDE_NORMAL);
    uint entry_point = prog_offs + ADS7253_SPI_CTRL_offset_entry_point;
    pio_sm_init(pio, sm, entry_point, &c);
    pio_sm_exec(pio, sm, pio_encode_set(pio_x, num_bits - 2));
    pio_sm_exec(pio, sm, pio_encode_set(pio_y, num_bits - 2));
    pio_sm_set_enabled(pio, sm, true);
    // Setup ingest state machines
    prog_offs = pio_add_program(pio, &ADS7253_SPI_INGEST_program);
    c = ADS7253_SPI_INGEST_program_get_default_config(prog_offs);
    entry_point = prog_offs + ADS7253_SPI_INGEST_offset_entry_point;
    sm_config_set_clkdiv_int_frac(&c, 1, 0);
    sm_config_set_in_shift(&c, false, true, num_bits);
    sm_config_set_in_pins(&c, pin_dinA);
    sm_config_set_fifo_join(&c, PIO_FIFO_JOIN_RX);  // Double depth RX fifo
    pio_gpio_init(pio, pin_dinA);
    pio_sm_init(pio, sm + 1u, entry_point, &c);
    // Most of this is likely redundant
    sm_config_set_clkdiv_int_frac(&c, 1, 0);
    sm_config_set_in_shift(&c, false, true, num_bits);
    sm_config_set_in_pins(&c, (pin_dinA + 1u));
    sm_config_set_fifo_join(&c, PIO_FIFO_JOIN_RX);  // Double depth RX fifo
    pio_gpio_init(pio, (pin_dinA + 1u));
    pio_sm_init(pio, sm + 2u, entry_point, &c);
    // Disable input synchronizers for real time ingest data
    hw_set_bits(&pio->input_sync_bypass, 3u << pin_dinA);
    pio_sm_set_enabled(pio, sm + 1, true);      // SDOA
    pio_sm_set_enabled(pio, sm + 2, true);      // SDOB
}

#endif

