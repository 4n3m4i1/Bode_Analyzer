;   ADS7253 "SPI" Interface
;   Shift Data Out on RISING
;   Shift Data IN on RISING
;
;   No action taken on falling edges
;       however ensure 50% duty sck
;
;   03/07/2024 Joseph A. De Vico

;   Intended Pin Layout (for sideset):
;   LSB
;       CS      (side bit 0)
;       SCK     (side bit 1)
;       DOUT
;       DIN_A
;       DIN_B
;   MSB

; If RX doesn't sync well use IRQ sync + counter

.program ADS7253_SPI_CTRL
.side_set 2

.wrap_target
bitloop:
    out pins, 1        side 0x2 [1]
;    in pins, 1         side 0x0
    jmp x-- bitloop    side 0x0 [1]

    out pins, 1        side 0x2 [1]
    mov x, y           side 0x0
;    in pins, 1         side 0x0
    jmp !osre bitloop  side 0x0
    nop                 side 0x0 [7]

public entry_point:                 ; Must set X,Y to n-2 before starting!
    pull ifempty       side 0x1 [1] ; Block with CSn high (minimum 2 cycles)
    nop                side 0x0 [4]; CSn front porch MAKE 1 IF BAD
.wrap

.program ADS7253_SPI_INGEST
.wrap_target
bitloopy:
public entry_point:
    wait 1 gpio, 2
    in pins,    1
    wait 0 gpio, 2 [1]
.wrap

% c-sdk {
#include "hardware/gpio.h"
static inline void pio_ads7253_spi_init(PIO pio, uint num_bits, uint clkdiv_i, uint clkdiv_f,
        uint pin_cs, uint pin_copi, uint pin_dinA, uint8_t invclk) {
    
    const uint sm = 0;

    // Setup output state machine
    unsigned int prog_offs = pio_add_program(pio, &ADS7253_SPI_CTRL_program);
    pio_sm_config c = ADS7253_SPI_CTRL_program_get_default_config(prog_offs);
    sm_config_set_out_pins(&c, pin_copi, 1);
    sm_config_set_sideset_pins(&c, pin_cs);
    sm_config_set_out_shift(&c, false, true, num_bits);
    
    sm_config_set_clkdiv_int_frac(&c, clkdiv_i, clkdiv_f);

    pio_sm_set_pins_with_mask(pio, sm, (2u << pin_cs), (3u << pin_cs) | (1u << pin_copi));
    pio_sm_set_pindirs_with_mask(pio, sm, (3u << pin_cs) | (1u << pin_copi), (3u << pin_cs) | (1u << pin_copi));

    sm_config_set_fifo_join(&c, PIO_FIFO_JOIN_TX);  // Double depth TX fifo

    pio_gpio_init(pio, pin_copi);
    pio_gpio_init(pio, pin_cs);
    pio_gpio_init(pio, pin_cs + 1);

    gpio_set_outover(pin_cs + 1, invclk ? GPIO_OVERRIDE_INVERT : GPIO_OVERRIDE_NORMAL);

    uint entry_point = prog_offs + ADS7253_SPI_CTRL_offset_entry_point;
    pio_sm_init(pio, sm, entry_point, &c);
    pio_sm_exec(pio, sm, pio_encode_set(pio_x, num_bits - 2));
    pio_sm_exec(pio, sm, pio_encode_set(pio_y, num_bits - 2));
    pio_sm_set_enabled(pio, sm, true);

    // Setup ingest state machines
    prog_offs = pio_add_program(pio, &ADS7253_SPI_INGEST_program);
    c = ADS7253_SPI_INGEST_program_get_default_config(prog_offs);
    entry_point = prog_offs + ADS7253_SPI_INGEST_offset_entry_point;

    sm_config_set_clkdiv_int_frac(&c, 1, 0);
    sm_config_set_in_shift(&c, false, true, num_bits);
    sm_config_set_in_pins(&c, pin_dinA);
    sm_config_set_fifo_join(&c, PIO_FIFO_JOIN_RX);  // Double depth RX fifo
    pio_gpio_init(pio, pin_dinA);
    pio_sm_init(pio, sm + 1u, entry_point, &c);

    // Most of this is likely redundant
    sm_config_set_clkdiv_int_frac(&c, 1, 0);
    sm_config_set_in_shift(&c, false, true, num_bits);
    sm_config_set_in_pins(&c, (pin_dinA + 1u));
    sm_config_set_fifo_join(&c, PIO_FIFO_JOIN_RX);  // Double depth RX fifo
    pio_gpio_init(pio, (pin_dinA + 1u));
    pio_sm_init(pio, sm + 2u, entry_point, &c);

    // Disable input synchronizers for real time ingest data
    hw_set_bits(&pio->input_sync_bypass, 3u << pin_dinA);
    pio_sm_set_enabled(pio, sm + 1, true);      // SDOA
    pio_sm_set_enabled(pio, sm + 2, true);      // SDOB
}
%}
